diff --git a/src/api/apiUrl.js b/src/api/apiUrl.js
index c3caee7..b7e3863 100644
--- a/src/api/apiUrl.js
+++ b/src/api/apiUrl.js
@@ -1,6 +1,6 @@
 import axios from "axios";
-import { API_URL } from "../constants/constants";
 import { Buffer } from "buffer";
+import { API_URL } from "../constants/constants";
 
 export const getEmployeeAPI = (params) =>
   axios.get(API_URL.EMPLOYEE, { params });
@@ -58,3 +58,14 @@ export const exportCv = async (id) =>
       link.click();
       document.body.removeChild(link);
     });
+
+export const getEmployeeNoPaginate = () =>
+  axios.get(`${API_URL.EMPLOYEE}${API_URL.NOPAGINATE}`);
+
+export const assignEmployee = (params) => axios.post("/assign", params);
+export const unassignEmployee = (params) => {
+  return axios.delete("/assign", { data: params });
+};
+
+export const updateProject = (id, params) =>
+  axios.patch(`/project/${id}`, params);
diff --git a/src/constants/constants.js b/src/constants/constants.js
index 9428ca3..319724f 100644
--- a/src/constants/constants.js
+++ b/src/constants/constants.js
@@ -11,6 +11,7 @@ export const API_URL = {
   MANAGER: "/employee/managers",
   EMPLOYEE_TOTAL: "/employee/total",
   PROJECT_TOTAL: "/project/total",
+  NOPAGINATE: "/noPaginate",
 };
 
 export const DATE_TIME = {
diff --git a/src/constants/query-key.js b/src/constants/query-key.js
index 8051df4..700a00b 100644
--- a/src/constants/query-key.js
+++ b/src/constants/query-key.js
@@ -4,4 +4,5 @@ export const QUERY_KEY = {
   MANAGER: "MANAGER",
   EMPLOYEE_TOTAL: "EMPLOYEE_TOTAL",
   PROJECT_TOTAL: "PROJECT_TOTAL",
+  NOPAGINATE: "NOPAGINATE",
 };
diff --git a/src/hooks/useEmployee.jsx b/src/hooks/useEmployee.jsx
index b782fc3..dbdc372 100644
--- a/src/hooks/useEmployee.jsx
+++ b/src/hooks/useEmployee.jsx
@@ -3,10 +3,11 @@ import { useNavigate } from "react-router";
 import {
   createEmployeeAPI,
   deleteEmployeeApi,
+  exportCv,
   getEmployeeAPI,
   getEmployeeDetailApi,
+  getEmployeeNoPaginate,
   patchEmployeeApi,
-  exportCv,
 } from "../api/apiUrl";
 import { openNotificationWithIcon } from "../components/notification/notification";
 import { QUERY_KEY } from "../constants/query-key";
@@ -23,7 +24,7 @@ export const useGetClients = (params) =>
     async () => {
       const { data } = await getEmployeeAPI(params);
       return data;
-    },
+    }
   );
 
 export const useCreateEmployee = () => {
@@ -40,7 +41,7 @@ export const useCreateEmployee = () => {
       onError: ({ response }) => {
         openNotificationWithIcon("error", "Create employee failed");
       },
-    },
+    }
   );
 
   return mutation;
@@ -95,3 +96,9 @@ export const useCVExport = () =>
       }
     },
   });
+
+export const useGetEmpNoPaginate = () =>
+  useQuery([QUERY_KEY.NOPAGINATE], async () => {
+    const { data } = await getEmployeeNoPaginate();
+    return data;
+  });
diff --git a/src/hooks/useProject.jsx b/src/hooks/useProject.jsx
index 0ac3da7..9a5e7a7 100644
--- a/src/hooks/useProject.jsx
+++ b/src/hooks/useProject.jsx
@@ -1,13 +1,16 @@
-import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
+import { useMutation, useQuery, useQueryClient } from "@tanstack/react-query";
 import {
+  assignEmployee,
+  createProjectAPI,
+  deleteProjectApi,
   getProjectApi,
   getProjectDetailApi,
-  deleteProjectApi,
   patchStatusApi,
-  createProjectAPI,
+  unassignEmployee,
+  updateProject,
 } from "../api/apiUrl";
-import { QUERY_KEY } from "../constants/query-key";
 import { openNotificationWithIcon } from "../components/notification/notification";
+import { QUERY_KEY } from "../constants/query-key";
 
 export const useGetData = (params) =>
   useQuery(
@@ -15,7 +18,7 @@ export const useGetData = (params) =>
     async () => {
       const { data } = await getProjectApi(params);
       return data;
-    },
+    }
   );
 
 export const useProjectStatusUpdate = () => {
@@ -65,3 +68,34 @@ export const useCreateProject = () => {
   });
   return mutation;
 };
+
+export const useAssignEmp = () => {
+  const queryClient = useQueryClient();
+
+  return useMutation((params) => assignEmployee(params), {
+    onSuccess: () => {
+      queryClient.refetchQueries([QUERY_KEY.PROJECT]);
+      openNotificationWithIcon("success", "success");
+    },
+  });
+};
+
+export const useUnAssignEmp = () => {
+  const queryClient = useQueryClient();
+
+  return useMutation((params) => unassignEmployee(params), {
+    onSuccess: () => {
+      queryClient.refetchQueries([QUERY_KEY.PROJECT]);
+      openNotificationWithIcon("success", "success");
+    },
+  });
+};
+
+export const useUpdateProject = (id) => {
+  const queryClient = useQueryClient();
+  return useMutation((params) => updateProject(id, params), {
+    onSuccess: () => {
+      openNotificationWithIcon("success", "success");
+    },
+  });
+};
diff --git a/src/pages/ProjectDetail.jsx b/src/pages/ProjectDetail.jsx
index 5b5850e..a9d2439 100644
--- a/src/pages/ProjectDetail.jsx
+++ b/src/pages/ProjectDetail.jsx
@@ -1,17 +1,18 @@
-import { MailOutlined, UserAddOutlined } from "@ant-design/icons";
+import { MailOutlined } from "@ant-design/icons";
 import {
-  Avatar,
   Button,
   Col,
   DatePicker,
   Form,
   Input,
   Row,
-  Tooltip,
+  Select,
+  Transfer,
   Typography,
 } from "antd";
 import dayjs from "dayjs";
 import moment from "moment";
+import { useEffect, useState } from "react";
 import Timeline, {
   DateHeader,
   SidebarHeader,
@@ -19,45 +20,51 @@ import Timeline, {
 } from "react-calendar-timeline";
 import "react-calendar-timeline/lib/Timeline.css";
 import { useParams } from "react-router-dom";
-import { useGetProjectData } from "../hooks/useProject";
+import { useGetEmpNoPaginate } from "../hooks/useEmployee";
+import {
+  useAssignEmp,
+  useGetProjectData,
+  useUnAssignEmp,
+  useUpdateProject,
+} from "../hooks/useProject";
 import "../styles/ProjectDetail.css";
 
 const { RangePicker } = DatePicker;
 
 const ProjectDetail = () => {
   const { id } = useParams();
+  const [form] = Form.useForm();
   const { data: project, isLoading, isError } = useGetProjectData(id);
+  const { mutate: assignEmp } = useAssignEmp();
+  const { mutate: unassign } = useUnAssignEmp();
+  const { mutate: updateProject } = useUpdateProject(id);
   console.log(project);
 
-  if (isLoading) {
-    return <div>Loading...</div>;
-  }
-
-  if (isError || !project) {
-    return <div>Project not found</div>;
-  }
-
-  const {
-    name,
-    description,
-    managerProject,
-    langFrame,
-    technology,
-    employee_project,
-    startDate,
-    endDate,
-    tracking,
-  } = project?.project;
-
-  const handleAssignClick = () => {
-    console.log("Assign button clicked");
+  const initialValues = {
+    name: project?.project.name,
+    description: project?.project.description,
+    managerProject: project?.project.managerProject,
+    langFrame: project?.project.langFrame,
+    technology: project?.project.technology,
+    employee_project: project?.project.employee_project,
+    startDate: project?.project.startDate,
+    endDate: project?.project.endDate,
+    tracking: project?.project.tracking,
+    employeeRoles: project?.project.employee_project.reduce((acc, item) => {
+      acc[item.employee.id] = item.roles;
+      return acc;
+    }, {}),
+    ...project?.project.employee_project.reduce((acc, item) => {
+      acc[item.employee.id] = item.roles;
+      return acc;
+    }, {}),
   };
 
-  const groups = tracking?.member.map((item) => {
+  const groups = initialValues.tracking?.member.map((item) => {
     return { id: item.id, title: item.employeeName };
   });
 
-  const items = tracking?.member.map((item) => {
+  const items = initialValues.tracking?.member.map((item) => {
     const id = item.id;
     const group = item.id;
     const start_time = moment(item.joinDate);
@@ -73,133 +80,263 @@ const ProjectDetail = () => {
     };
   });
 
+  const { data: empNoPagi } = useGetEmpNoPaginate();
+
+  const [dataSource, setDataSource] = useState([]);
+  const [targetKeys, setTargetKeys] = useState([]);
+  const [selectedKeys, setSelectedKeys] = useState([]);
+
+  useEffect(() => {
+    if (initialValues.employee_project) {
+      const newData = initialValues?.employee_project
+        .map((item) => {
+          return item;
+        })
+        .map((emp) => emp.employeeId);
+      setTargetKeys(newData);
+    }
+    if (empNoPagi) {
+      const newData = empNoPagi.map((item) => {
+        return {
+          ...item,
+          key: item.id,
+        };
+      });
+      setDataSource(newData);
+    }
+  }, [initialValues.employee_project]);
+
+  const onChange = (nextTargetKeys, direction, moveKeys) => {
+    // console.log("targetKeys:", nextTargetKeys);
+    // console.log("direction:", direction);
+    // console.log("moveKeys:", moveKeys);
+    const dataAssign = moveKeys.map((item) => {
+      return {
+        employeeId: item,
+        projectId: id,
+        roles: [],
+        joinDate: new Date(),
+      };
+    });
+    if (direction === "right") {
+      assignEmp(dataAssign);
+    }
+
+    if (direction === "left") {
+      unassign({ employeeIds: moveKeys, projectId: id });
+    }
+    setTargetKeys(nextTargetKeys);
+  };
+
+  const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {
+    setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);
+  };
+
+  const onFinish = (value) => {
+    const { name, description, langFrame, technology, ...rest } = value;
+    const newData = {
+      name,
+      description,
+      langFrame,
+      technology,
+      employeeRoles: rest,
+    };
+
+    console.log(newData);
+    updateProject(newData);
+  };
+
   return (
     <div className="projectDetail-Content">
-      <Row gutter={16}>
-        <Col span={7} className="manager-infor">
-          <div className="manager-detail">
-            <Typography.Title level={3}>Manager Information</Typography.Title>
-            <img src={managerProject.avatar} alt={managerProject.name} />
-            <Typography.Title level={5}>{managerProject.name}</Typography.Title>
-            <p>
-              <MailOutlined /> {managerProject.email}
-            </p>
-          </div>
-        </Col>
-        <Col span={15} className="project-infor">
-          <div className="project-detail">
-            <Typography.Title level={3} style={{ marginBottom: "15px" }}>
-              Project Details
-            </Typography.Title>
-            <Form
-              labelCol={{
-                span: 5,
-              }}
-              wrapperCol={{
-                span: 16,
-              }}
-              layout="horizontal"
-              style={{
-                maxWidth: 700,
-              }}
-            >
-              <Form.Item label="Project Name">
-                <Input value={name} readOnly />
-              </Form.Item>
-
-              <Form.Item label="Description">
-                <Input value={description} readOnly />
-              </Form.Item>
-
-              <Form.Item label="Lang Frame">
-                <div className="langFrame-container">
-                  {langFrame.map((frame) => (
-                    <span key={frame.name} className="lang-frame-item">
-                      {frame.name}
-                    </span>
-                  ))}
-                </div>
-              </Form.Item>
-
-              <Form.Item label="Technology">
-                <div className="technology-container">
-                  {technology.map((tech) => (
-                    <span key={tech.name} className="technology-item">
-                      {tech.name}
-                    </span>
-                  ))}
-                </div>
-              </Form.Item>
-
-              <Form.Item label="Members Assigned">
-                <Avatar.Group maxCount={2}>
-                  {employee_project.map((member) => (
-                    <Tooltip key={member.id}>
-                      <Avatar
-                        src={member.employee.avatar}
-                        style={{ backgroundColor: "#87D068" }}
-                      ></Avatar>
-                    </Tooltip>
+      {project && (
+        <>
+          <Row gutter={16}>
+            <Col span={7} className="manager-infor">
+              <div className="manager-detail">
+                <Typography.Title level={3}>
+                  Manager Information
+                </Typography.Title>
+                <img src={initialValues.managerProject.avatar} alt="" />
+                <Typography.Title level={5}>
+                  {initialValues.managerProject.name}
+                </Typography.Title>
+                <p>
+                  <MailOutlined /> {initialValues.managerProject.email}
+                </p>
+              </div>
+            </Col>
+            <Col span={15} className="project-infor">
+              <div className="project-detail">
+                <Typography.Title level={3} style={{ marginBottom: "15px" }}>
+                  Project Details
+                </Typography.Title>
+                <Form
+                  form={form}
+                  onFinish={onFinish}
+                  initialValues={initialValues}
+                  labelCol={{
+                    span: 5,
+                  }}
+                  wrapperCol={{
+                    span: 16,
+                  }}
+                  layout="horizontal"
+                  style={{
+                    maxWidth: 700,
+                  }}
+                >
+                  <Form.Item name="name" label="Project Name">
+                    <Input />
+                  </Form.Item>
+
+                  <Form.Item name="description" label="Description">
+                    <Input />
+                  </Form.Item>
+
+                  <Form.Item name="langFrame" label="Lang Frame">
+                    <Select
+                      mode="multiple"
+                      placeholder="Please select"
+                      style={{ width: "100%" }}
+                    >
+                      {[
+                        "Java",
+                        "JavaScript",
+                        "Python",
+                        "PHP",
+                        "C#",
+                        "C++",
+                        "Ruby",
+                        "Pascal",
+                        "Swift",
+                        "SQL",
+                      ].map((option) => (
+                        <Select.Option key={option} value={option}>
+                          {option}
+                        </Select.Option>
+                      ))}
+                    </Select>
+                  </Form.Item>
+
+                  <Form.Item name="technology" label="Technology">
+                    <Select
+                      mode="multiple"
+                      placeholder="Please select"
+                      style={{ width: "100%" }}
+                    >
+                      {[
+                        "IntelliJ IDEA",
+                        "Sublime Text",
+                        "Xcode",
+                        "Microsoft Visual Studio",
+                        "Visual Studio Code",
+                        "IDE",
+                        "Github",
+                        "Docker",
+                        "Postman",
+                      ].map((option) => (
+                        <Select.Option key={option} value={option}>
+                          {option}
+                        </Select.Option>
+                      ))}
+                    </Select>
+                  </Form.Item>
+
+                  <Form.Item label="Members Assigned">
+                    <Transfer
+                      dataSource={dataSource ?? dataSource}
+                      titles={["Source", "Target"]}
+                      targetKeys={targetKeys}
+                      selectedKeys={selectedKeys}
+                      onChange={onChange}
+                      onSelectChange={onSelectChange}
+                      render={(item) => item.name}
+                    />
+                  </Form.Item>
+
+                  {project.project.employee_project?.map((item) => (
+                    <Form.Item
+                      name={item.employee.id}
+                      label={item.employee.name}
+                    >
+                      <Select
+                        mode="multiple"
+                        placeholder="Roles"
+                        style={{ width: "100%" }}
+                      >
+                        {[
+                          "fe",
+                          "be",
+                          "ba",
+                          "qa",
+                          "ux_ui",
+                          "devops",
+                          "fullstack",
+                        ].map((option) => (
+                          <Select.Option key={option} value={option}>
+                            {option}
+                          </Select.Option>
+                        ))}
+                      </Select>
+                    </Form.Item>
                   ))}
-                </Avatar.Group>
-
-                <Avatar.Group>
-                  <Avatar
-                    onClick={handleAssignClick}
-                    style={{ backgroundColor: "#87D068" }}
-                  >
-                    <UserAddOutlined />
-                  </Avatar>
-                </Avatar.Group>
-              </Form.Item>
-
-              <Form.Item label="Deadline">
-                <RangePicker
-                  defaultValue={[dayjs(startDate), dayjs(endDate)]}
-                  format="YYYY-MM-DD"
-                />
-              </Form.Item>
-            </Form>
-            <div className="button-container">
-              <Button type="primary">Submit</Button>
-            </div>
-          </div>
-        </Col>
-      </Row>
-      <Row>
-        <Timeline
-          groups={groups}
-          items={items}
-          defaultTimeStart={moment(tracking.joinDate)}
-          defaultTimeEnd={moment(tracking.fireDate)}
-          canMove={false}
-          canResize={false}
-          canChangeGroup={false}
-        >
-          <TimelineHeaders className="sticky">
-            <SidebarHeader>
-              {({ getRootProps }) => {
-                return (
-                  <div
-                    style={{
-                      display: "flex",
-                      justifyContent: "center",
-                      alignItems: "center",
-                      width: "150px",
-                      color: "white",
-                      fontWeight: "bold",
-                    }}
-                  >
-                    {name}
-                  </div>
-                );
-              }}
-            </SidebarHeader>
-            <DateHeader unit="primaryHeader" />
-            <DateHeader />
-          </TimelineHeaders>
-        </Timeline>
-      </Row>
+
+                  <Form.Item label="Deadline">
+                    <RangePicker
+                      defaultValue={[
+                        dayjs(initialValues?.startDate),
+                        dayjs(initialValues?.endDate),
+                      ]}
+                      format="YYYY-MM-DD"
+                    />
+                  </Form.Item>
+                  <Form.Item>
+                    <div className="button-container">
+                      <Button htmlType="submit" type="primary">
+                        Submit
+                      </Button>
+                    </div>
+                  </Form.Item>
+                </Form>
+              </div>
+            </Col>
+          </Row>
+          <Row>
+            <Timeline
+              groups={groups}
+              items={items}
+              defaultTimeStart={moment(initialValues?.tracking.joinDate)}
+              defaultTimeEnd={moment(initialValues?.tracking.fireDate)}
+              canMove={false}
+              canResize={false}
+              canChangeGroup={false}
+            >
+              <TimelineHeaders className="sticky">
+                <SidebarHeader>
+                  {({ getRootProps }) => {
+                    return (
+                      <div
+                        style={{
+                          display: "flex",
+                          justifyContent: "center",
+                          alignItems: "center",
+                          width: "150px",
+                          color: "white",
+                          fontWeight: "bold",
+                        }}
+                      >
+                        {name}
+                      </div>
+                    );
+                  }}
+                </SidebarHeader>
+                <DateHeader unit="primaryHeader" />
+                <DateHeader />
+              </TimelineHeaders>
+            </Timeline>
+          </Row>
+        </>
+      )}
     </div>
   );
 };
